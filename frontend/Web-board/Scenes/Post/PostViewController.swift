//
//  PostViewController.swift
//  Web-board
//
//  Created by Tawisit Rungsimuntupong on 1/5/2562 BE.
//  Copyright (c) 2562 Tawisit Rungsimuntupong. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit

protocol PostDisplayLogic: class
{
    func displayPosts(viewModel: Post.GetPosts.ViewModel)
    func reload()
    func setIsNextBtnEnabled(isEnabled: Bool)
    func setIsPrevBtnEnabled(isEnabled: Bool)
}

class PostViewController: UIViewController, PostDisplayLogic
{
    @IBOutlet weak var content: UITextField!
    @IBOutlet weak var postBtn: UIButton!
    @IBOutlet weak var tableView: UITableView!
    @IBOutlet weak var prevBtn: UIButton!
    @IBOutlet weak var nextBtn: UIButton!
    
    @IBAction func onPostBtnClicked(_ sender: Any) {
        if let text = content.text, !text.isEmpty {
            let request = Post.CreatePost.Request(content: text)
            interactor?.createPost(request: request)
        }
    }
    
    @IBAction func onNextBtnClicked(_ sender: Any) {
        getPosts(pagination: .next, isReload: false)
    }
    
    @IBAction func onPrevBtnClicked(_ sender: Any) {
        getPosts(pagination: .previous, isReload: false)
    }

    var interactor: PostBusinessLogic?
    var router: (NSObjectProtocol & PostRoutingLogic & PostDataPassing)?
    var viewModel: Post.GetPosts.ViewModel?

    // MARK: Object lifecycle

    override init(nibName nibNameOrNil: String?, bundle nibBundleOrNil: Bundle?)
    {
        super.init(nibName: nibNameOrNil, bundle: nibBundleOrNil)
        setup()
    }

    required init?(coder aDecoder: NSCoder)
    {
        super.init(coder: aDecoder)
        setup()
    }

    // MARK: Setup

    private func setup()
    {
        let viewController = self
        let interactor = PostInteractor()
        let presenter = PostPresenter()
        let router = PostRouter()
        viewController.interactor = interactor
        viewController.router = router
        interactor.presenter = presenter
        presenter.viewController = viewController
        router.viewController = viewController
        router.dataStore = interactor
    }

    // MARK: Routing

    override func prepare(for segue: UIStoryboardSegue, sender: Any?)
    {
        if let scene = segue.identifier {
            let selector = NSSelectorFromString("routeTo\(scene)WithSegue:")
            if let router = router, router.responds(to: selector) {
            router.perform(selector, with: segue)
            }
        }
        
        if let vc = segue.destination as? CommentViewController, let post = sender as? Post.Post {
            router?.passDataToComment(destination: vc, post: post)
        }
    }

    // MARK: View lifecycle

    override func viewDidLoad()
    {
        super.viewDidLoad()

        tableView.dataSource = self
        tableView.delegate = self
        postBtn.layer.cornerRadius = 4
        prevBtn.layer.cornerRadius = 4
        nextBtn.layer.cornerRadius = 4
        getPosts(pagination: .next, isReload: true)
    }

    // MARK: get post

    func getPosts(pagination: Post.GetPosts.Pagination, isReload: Bool)
    {
        let request = Post.GetPosts.Request(pagination: pagination, isReload: isReload)
        interactor?.getPosts(request: request)
    }

    func reload() {
        content.text = ""
        getPosts(pagination: .next, isReload: true)
    }

    func displayPosts(viewModel: Post.GetPosts.ViewModel)
    {
        self.viewModel = viewModel
        tableView.reloadData()
    }
    
    func setIsNextBtnEnabled(isEnabled: Bool) {
        nextBtn.isHidden = !isEnabled
        nextBtn.isEnabled = isEnabled
    }
    
    func setIsPrevBtnEnabled(isEnabled: Bool) {
        prevBtn.isHidden = !isEnabled
        prevBtn.isEnabled = isEnabled
    }
}

extension PostViewController: UITableViewDataSource {
    func tableView(_ tableView: UITableView, numberOfRowsInSection section: Int) -> Int {
        return viewModel?.posts.count ?? 0
    }
    
    func tableView(_ tableView: UITableView, cellForRowAt indexPath: IndexPath) -> UITableViewCell {
        let cell =  tableView.dequeueReusableCell(withIdentifier: "PostCell", for: indexPath) as! PostCell
        if let post = viewModel?.posts[indexPath.row] {
            cell.content.text = post.content
            cell.comment.text = "Comments: \(post.numberOfComments)"
            cell.createBy.text = "Create by: \(post.createBy)"
            cell.createDate.text = post.createDate != nil ? "Create date: \(CommonWorker.shared.dateString.string(from: post.createDate!))" : ""
            cell.lastCommentDate.text = post.lastCommentDate != nil ? "Last comment date: \(CommonWorker.shared.dateString.string(from: post.lastCommentDate!))" : ""
        }
        
        return cell
    }
    
}

extension PostViewController: UITableViewDelegate {
    func tableView(_ tableView: UITableView, didSelectRowAt indexPath: IndexPath) {
        if let post = viewModel?.posts[indexPath.row] {
            router?.navigateToComment(source: self, post: post)
        }
    }
}
