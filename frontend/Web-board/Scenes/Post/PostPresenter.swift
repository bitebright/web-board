//
//  PostPresenter.swift
//  Web-board
//
//  Created by Tawisit Rungsimuntupong on 1/5/2562 BE.
//  Copyright (c) 2562 Tawisit Rungsimuntupong. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit

protocol PostPresentationLogic
{
    func presentPosts(response: Post.GetPosts.Response)
    func reload()
}

class PostPresenter: PostPresentationLogic
{
    weak var viewController: PostDisplayLogic?

    // MARK: Do something

    func presentPosts(response: Post.GetPosts.Response)
    {
        switch response.disableButton {
        case .previous:
            viewController?.setIsNextBtnEnabled(isEnabled: true)
            viewController?.setIsPrevBtnEnabled(isEnabled: false)
        case .next:
            viewController?.setIsNextBtnEnabled(isEnabled: false)
            viewController?.setIsPrevBtnEnabled(isEnabled: true)
        case .both:
            
            viewController?.setIsNextBtnEnabled(isEnabled: false)
            viewController?.setIsPrevBtnEnabled(isEnabled: false)
        case .none:
            viewController?.setIsNextBtnEnabled(isEnabled: true)
            viewController?.setIsPrevBtnEnabled(isEnabled: true)
        }
        
        let viewModel = Post.GetPosts.ViewModel(posts: response.posts)
        viewController?.displayPosts(viewModel: viewModel)
    }

    func reload() {
        viewController?.reload()
    }
}
