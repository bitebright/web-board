//
//  PostWorker.swift
//  Web-board
//
//  Created by Tawisit Rungsimuntupong on 1/5/2562 BE.
//  Copyright (c) 2562 Tawisit Rungsimuntupong. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit
import Alamofire
import SwiftyJSON

class PostWorker {
    fileprivate let commonWorker: CommonWorker = CommonWorker.shared
    
    func getPosts(pageNumber: Int, numberPerPage: Int, completionHandler: @escaping (_ response: Post.GetPosts.Response) -> Void) {
        let parameters: Parameters = ["numberPerPage": numberPerPage, "pageNumber": pageNumber]
        
        Alamofire.request("\(commonWorker.baseUrl)/posts", method: .post, parameters: parameters, encoding: JSONEncoding.default, headers: ["Content-Type": "application/json"])
            .responseJSON {
                response in
                
                switch response.result {
                case .success:
                    do {
                        let json = try JSON(data: response.data!)
                        var postDataList = [Post.Post]()
                        json.dictionary?["posts"]?.array?.forEach({ (post) in
                            let numberOfComments = post["numberOfComments"].int ?? 0
                            let createBy = post["createdBy"].string ?? ""
                            let content = post["content"].string ?? ""
                            let id = post["id"].int ?? 0
                            
                            let create_date = post["createdDate"].string ?? ""
                            let last_comment_date = post["lastCommentDated"].string ?? ""
                            let createDate = self.commonWorker.dateTimeFormatter.date(from: create_date)
                            let lastCommentDate = self.commonWorker.dateTimeFormatter.date(from: last_comment_date)
                            
                            postDataList.append(Post.Post(numberOfComments: numberOfComments, createDate: createDate, createBy: createBy, content: content, id: id, lastCommentDate: lastCommentDate))
                        })
                        
                        var disableButton: Post.GetPosts.DisableButton = .none
                        if let totalPageNumber = json.dictionary?["totalPageNumber"]?.int {
                            if pageNumber == 1, pageNumber == totalPageNumber {
                                disableButton = .both
                            } else if pageNumber == totalPageNumber {
                                disableButton = .next
                            } else if pageNumber == 1 {
                                disableButton = .previous
                            } else {
                                disableButton = .none
                            }
                        }
                        
                        let getPostsResponse = Post.GetPosts.Response(
                            posts: postDataList,
                            disableButton: disableButton)
                        
                        completionHandler(getPostsResponse)
                    } catch {
                        print(error)
                    }
                    
                    break
                case .failure(let error):
                    print(error)
                }
        }
    }
  
    func createPost(request: Post.CreatePost.Request, completionHandler: @escaping () -> Void) {
        let ipAddress = commonWorker.getIPAddress()
        
        let parameters: Parameters = ["content": request.content, "createdBy": ipAddress ?? ""]
        Alamofire.request("\(commonWorker.baseUrl)/posts/add", method: .post, parameters: parameters, encoding: JSONEncoding.default, headers: ["Content-Type": "application/json"]).responseData {
            response in
            
            switch response.result {
            case .success:
                print("create post success")
                completionHandler()
                break
            case .failure(let error):
                print(error)
            }
        }
    }
}
